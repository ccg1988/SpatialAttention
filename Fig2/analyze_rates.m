function [ datafile, rates, rep_rates, stdev_of_mean, is_driven, rates_vs_time,...
    spont_rep_rates] = analyze_rates( varargin )

%The functions of divide_by_zero have three working modes: 

%In the 1st mode, a datafile structure is input (generated by "open_m_datafile"), which have all the necessary information. 

%In the 2nd mode, it will call "open_m_datafile" by itself 

%In the 3rd mode, information is input individually: the function call look like this:
% [ rates ] = analyze_rate( data, stim, reps, stim_dur, analysis_window, pre_stim );

%Modified by CCG 2020-03-22

%% Get data
need_data = 1;

if isstruct(varargin{1}) %passed in datfile struct **********1st mode
    %datafile=open_m_datafile('M71V',888,4); datafile=analyze_rates(datafile,1);
    datafile = varargin{1};
    params_used = 1;
    extra_params = length(varargin) - params_used;
elseif ischar(varargin{1}) %passed in monkey ID and file number/channel number **********2nd mode
    %datafile=analyze_rates('M71V',[888,4],1);%file is M71V0888.m, channel 4, plot is on
   % datafile = open_m_datafile(varargin{1},varargin{2}(1), varargin{2}(2));
    datafile = open_m_datafile(varargin{1},varargin{2}(1), varargin{2}(2), [], [], 'ms');
    params_used = 2;
    extra_params = length(varargin) - params_used;
else %passed in data directly **********3rd mode
    data = varargin{1};
    stim = varargin{2};
    reps = varargin{3};
    stim_dur = varargin{4};
    tmin = varargin{5}(1);
    tmax = varargin{5}(1);
    pre_stim = varargin{6};
    params_used = 6;
    extra_params = length(varargin) - params_used;
    need_data = 0;  %Watchout
end


if extra_params %********** for plotting, like: datafile=analyze_rates('M71V',[888,4],1), extra_params=1;
    plot_on = varargin{params_used+1};
else
    plot_on = 0;
end

if extra_params > 1 && length(varargin{params_used+2}) == 2 %parameters for firing rate over time
    %datafile=analyze_rates('M71V',[888,4],1,[5,5]);
    %divide the 205ms(420-215) window into 41 pieces
    twindow = varargin{4}(1);  %size of analysis window-----original is varargin{3}(1)
    tstep = varargin{4}(2);       %analysis window step size---original is varargin{3}(2)
elseif extra_params > 1 && ~isempty(varargin{params_used+2})
    %datafile=analyze_rates('M71V',[888,4],1,2); %for last variable, any value is okay
    twindow = 50;
    tstep = 50;
end

if extra_params > 2%for 3rd mode only; if we need to change the spiking window, we need to change it within "open_m_datafile" 
    tmin = varargin{params_used+3}(1);
    tmax = varargin{params_used+3}(2);
end

if need_data %for 1st & 2nd mode only
    data = datafile.data;
    stim = datafile.stim;
    reps = datafile.reps;
    stim_dur = datafile.stim_dur;
%     stim_dur=100
    tmin = datafile.tmin;
    tmax = datafile.tmax;
%     tmax = 315;
    pre_stim = datafile.pre_stim;
end

%% Start processing
rates_vs_time = [];
% is_driven_alpha = .05/stim; %Bonferoni corrected
is_driven_alpha = .001; %p-value, same as Evan's paper

%   Compute Spike Rates

if length(reps) == 1
    reps(end+1:stim) = reps;
end

rep_rates = zeros(max(reps),stim);
spont_rep_rates = zeros(sum(reps),1);
spont_rate_index = 1;
pre_stim_data = data(data(:,4)< pre_stim & data(:,4)>0,:);
stim_overhang = tmax - (pre_stim + max(stim_dur));
%There are two cases for calculating firing rate. 
%1st uses a static, user-defined tmax and tmin over which all stimuli are evaluated. 
%2nd determines the analysis window independently for each stimulus, allowing stimuli of varying lengths.

%data come from "open_m_datafile":
%C1 is stim (1~32), C2 is repeats (1~10), C3 is channels (4~7), C4 is spiking time
%Each L is a single spike from specific channel

%this is for 1st case
if length(stim_dur)==1 || stim_overhang < 0 || tmin > min(stim_dur) + pre_stim
    reduced_data = data((data(:,4)>tmin & data(:,4)<tmax),:);
    for i = 1:stim
        stim_ind = find(reduced_data(:,1)==i);
        reduced_data2 = reduced_data(stim_ind,:);
        reduced_data(stim_ind,:) = [];
        pre_stim_ind = find(pre_stim_data(:,1) == i);
        pre_stim_data2 = pre_stim_data(pre_stim_ind,:);
        pre_stim_data(pre_stim_ind,:) = [];
        for j=1:reps(i)
            old_len = size(reduced_data2,1);
            reduced_data2(reduced_data2(:,2)==j,:)=[];
            new_len = size(reduced_data2,1);
            rep_rates(j,i) = (old_len - new_len)/(tmax - tmin)*1000;
            old_len = size(pre_stim_data2,1);
            pre_stim_data2(pre_stim_data2(:,2)==j,:)=[];
            new_len = size(pre_stim_data2,1);
            spont_rep_rates(spont_rate_index) = (old_len - new_len)/tmin*1000;
            spont_rate_index = spont_rate_index + 1;
        end %for reps
    end %for stim
    
%this is for 2nd case
else
    reduced_data = data(data(:,4)>tmin,:);
    for i = 1:stim            %spike for each stimulus
        stim_ind = find(reduced_data(:,1)==i);
        reduced_data2 = reduced_data(stim_ind,:);
        reduced_data(stim_ind,:) = [];
        stim_reps = unique(reduced_data2(:,2));
        for j=stim_reps'   %spike for each repeat
            old_len = size(reduced_data2,1);
            reduced_data2((reduced_data2(:,2)==j & reduced_data2(:,4)<(pre_stim+stim_dur(i)+stim_overhang)),:)=[];
            new_len = size(reduced_data2,1);
            rep_rates(j,i) = (old_len - new_len)/(pre_stim + stim_dur(i) + stim_overhang - tmin)*1000;
        end %for reps
        pre_stim_ind = find(pre_stim_data(:,1) == i);
        pre_stim_data2 = pre_stim_data(pre_stim_ind,:);
        pre_stim_data(pre_stim_ind,:) = [];
        pre_stim_reps = unique(pre_stim_data2(:,2));
        %Since only rates are calculated only or trials in which there are
        %spikes in the pre-stim window, there will be a series of zeros at
        %the end of rep_spont rates of length equal to the number of
        %pre_stim windows without spontaneous firing.
        for j = pre_stim_reps'
            old_len = size(pre_stim_data2,1);
            pre_stim_data2(pre_stim_data2(:,2)==j,:)=[];
            new_len = size(pre_stim_data2,1);
            spont_rep_rates(spont_rate_index) = (old_len - new_len)/(pre_stim)*1000;
            spont_rate_index = spont_rate_index + 1;
        end
    end %for stim
end %if stim_dur


% Var(X) = E(X^2) - E(X)^2
% stdev_of_mean = (Var(X)/N)^1/2
rates = mean(rep_rates,1);
stdev_of_mean = ((sum(rep_rates.^2,1)./reps - rates.^2) ./ reps).^(1/2);

is_driven = zeros(1,length(rates));
p = zeros(1,length(rates));
for i = 1:length(rates)
    [p(i), is_driven(i)] = ranksum(rep_rates(:,i),spont_rep_rates,'alpha',is_driven_alpha);
    if is_driven(i) && rates(i) < mean(spont_rep_rates)
        is_driven(i) = -1;
    end
end

%Rates vs. time analysis
spike_time=[];
if exist('twindow','var') %do time window analysis of firing rate
    %time_steps = ceil((tmax-tmin-twindow)/tstep)+1;
    time_steps = floor((tmax-tmin-twindow)/tstep)+1;
    reduced_data=data((data(:,4)>tmin & data(:,4)<tmax),:);
    reduced_data_full=data((data(:,4)>(tmin-15) & data(:,4)<tmax),:);
    rates_vs_time = zeros(stim,time_steps);
    spike_time = zeros(stim,(time_steps+15),max(reps));
    for i = 1:stim
        stim_ind = reduced_data(:,1)==i;
        reduced_data2 = reduced_data(stim_ind,:);
        reduced_data2_full = reduced_data_full(stim_ind,:);
        %rates_vs_time{i} = zeros(1,time_steps);
        for j = 1:time_steps
            tstart = tmin+(j-1)*tstep;
            tstop = tstart+twindow;
            spike_count = sum(reduced_data2(:,4)>=tstart & reduced_data2(:,4)<tstop);
            stim_reps = unique(reduced_data2(:,2));
                for r=stim_reps'   %spike for each repeat
                    ind=reduced_data2_full(reduced_data2_full(:,2)==r,4)-(tmin-15);
                    spike_time(i, ind, r)=1;
                end
            rates_vs_time(i,j) = 1000*spike_count/(reps(i)*tstep);
        end
    end
end

datafile.rates = rates;
datafile.rep_rates = rep_rates;
datafile.stdev_of_mean = stdev_of_mean;
datafile.is_driven = is_driven;
datafile.p_values = p;
datafile.rates_vs_time = rates_vs_time;
datafile.spike_time =spike_time;
datafile.spont_rep_rates = spont_rep_rates;

%%
if plot_on
    xlabel_string = datafile.x_name;
    xtick_labels = datafile.x_param;
    
    figure;
    h = errorbar(rates,stdev_of_mean,'linewidth',2);
    % Set post-plot axes properties
    h_axes = get(h,'parent');
%     set(h_axes,'FontSize',12,'FontWeight','Bold');
    set(h_axes,'FontSize',12,'FontWeight','Bold','XTick',1:length(xtick_labels),...
        'XTickLabel',xtick_labels,'XLim',[.5 stim+.5],'Box','Off');
    title(['Unit ' num2str(datafile.unit_num)],'FontSize',12,'FontWeight','Bold');%number to num by CCG 03/22
    ylabel('Spikes/Second','FontSize',12,'FontWeight','Bold')
%     xlabel('Stimulus Number','FontSize',12,'FontWeight','Bold')
    xlabel(xlabel_string,'FontSize',12,'FontWeight','Bold')
    line([1 stim],[mean(spont_rep_rates) mean(spont_rep_rates)],'linestyle','--','color','k')
end

end

